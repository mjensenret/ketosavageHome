@model IEnumerable<KetoSavageWeb.ViewModels.WeightViewModel>
@*@Html.DevExpress().Chart(settings =>
    {
        settings.Name = "ClientWeightGraph";
        settings.Height = 250;
        settings.Width = 900;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = DefaultBoolean.True;
        settings.AppearanceName = "Dark";

        settings.Legends.Default(l =>
        {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
            l.HorizontalIndent = 12;
        });

        settings.Series.Template(t =>
        {
            t.ArgumentDataMember = "date";
            t.ValueDataMembers[0] = "weight";
            t.LabelsVisibility = DefaultBoolean.False;
            t.Views().LineSeriesView(v =>
            {
                v.PointMarkerOptions.Size = 1;
                v.PointMarkerOptions.Kind = MarkerKind.Circle;
                v.SeriesLabel(l =>
                {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
        });

        settings.XYDiagram(d =>
        {
            d.AxisX.Interlaced = false;
            d.AxisX.Title.Text = "Days";
            d.AxisX.WholeRange.Auto = true;
            d.AxisX.WholeRange.AutoSideMargins = true;
            d.AxisX.WholeRange.AlwaysShowZeroLevel = false;
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.Title.Text = "Weight";
            d.AxisY.VisualRange.Auto = true;
            d.AxisY.WholeRange.Auto = true;
            d.AxisY.WholeRange.AlwaysShowZeroLevel = false;
            d.AxisY.WholeRange.AutoSideMargins = true;

        });

        settings.Titles.Add(new ChartTitle()
        {
            Text = "Client Weigh-in"
        });

    }).Bind(Model, "type").GetHtml()*@

<div id="chart-demo">
    @(Html.DevExtreme().Chart()
        .ID("line-chart")
        .DataSource(Model)
        .Palette(VizPalette.Bright)
        .CommonSeriesSettings(s => s
            .ArgumentField("date")
            .ValueField("weight")
            .Type(SeriesType.Line)
            .Point(p => p
                .Size(1)
            )
        )
        .SeriesTemplate(st => st
            .NameField("type")
        )
        .Margin(m => m.Bottom(20))
        .ArgumentAxis(a => a
            .ValueMarginsEnabled(false)
            .DiscreteAxisDivisionMode(DiscreteAxisDivisionMode.CrossLabels)
            .Grid(g => g.Visible(true))
        )
        //.Series(s =>
        //{
        //    s.Add().ValueField("weight").Name("Actual");
        //    //s.Add().ValueField("Oil").Name("Oil");
        //    //s.Add().ValueField("Gas").Name("Natural gas");
        //    //s.Add().ValueField("Coal").Name("Coal");
        //    //s.Add().ValueField("Nuclear").Name("Nuclear");
        //})
        .Legend(l => l
            .VerticalAlignment(VerticalEdge.Bottom)
            .HorizontalAlignment(HorizontalAlignment.Center)
            .ItemTextPosition(Position.Bottom)
        )
        .Title(t => t
            .Text("Weight Trend")
        //.Subtitle(s => s.Text(""))
        )
        .Export(e => e.Enabled(false))
        .Tooltip(t => t
            .Enabled(true)
            .CustomizeTooltip(@<text>
                function (arg) {
                return {
                text: arg.valueText
                };
                }
            </text>)
        )
    //.DataSource(new List<object> {
    //    new { Country = "USA", Hydro = 59.8, Oil = 937.6, Gas = 582, Coal = 564.3, Nuclear = 187.9 },
    //    new { Country = "China", Hydro = 74.2, Oil = 308.6, Gas = 35.1, Coal = 956.9, Nuclear = 11.3 },
    //    new { Country = "Russia", Hydro = 40, Oil = 128.5, Gas = 361.8, Coal = 105, Nuclear = 32.4 },
    //    new { Country = "Japan", Hydro = 22.6, Oil = 241.5, Gas = 64.9, Coal = 120.8, Nuclear = 64.8 },
    //    new { Country = "India", Hydro = 19, Oil = 119.3, Gas = 28.9, Coal = 204.8, Nuclear = 3.8 },
    //    new { Country = "Germany", Hydro = 6.1, Oil = 123.6, Gas = 77.3, Coal = 85.7, Nuclear = 37.8 }
    //})
    )

    @*<div class="options">
            <div class="caption">Options</div>
            <div class="option">
                <span>Series Type</span>
                @(Html.DevExtreme().SelectBox()
                    .DataSource(new[] {
                        SeriesType.Line,
                        SeriesType.StackedLine,
                        SeriesType.FullStackedLine
                    })
                    .Value(SeriesType.Line)
                    .OnValueChanged(@<text>
                        function (e) {
                        $("#line-chart").dxChart("option", "commonSeriesSettings.type", e.value);
                        }
                    </text>)
                )
            </div>
        </div>*@
</div>   