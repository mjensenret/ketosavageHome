@using DevExpress.XtraLayout.Filtering.Templates
@*@model IEnumerable<KetoSavageWeb.ViewModels.UserProgramProgress>*@
@{ var today = DateTime.Now; }
<div id="devExtremeProgramGrid">
    @(Html.DevExtreme().DataGrid()
            .ID("gridClientProgram")
            .DataSource(d => d.WebApi()
                .Controller("ProgressApi")
                .LoadAction("GetUserProgressGrid")
                //.LoadParams(new { programId = 8})
                .LoadParams(new {userId = ViewData["UserId"]} )
                .UpdateAction("UpdateSingleDay")
                .Key("Date")
            )
            .RowAlternationEnabled(true)
            //.FocusedRowEnabled(true)
            //.FocusedRowKey(new DateTime(today.Year, today.Month, today.Day).ToString("s")) //<-- not sure what to put here...
            //.OnInitialized("onDataGridInitialized")
            //      .OnFocusedRowChanging("onFocusedRowChanging")
            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
            .OnRowUpdating("onRowUpdating")
              .Editing(e =>
              {
                  e.AllowUpdating(true);
                  e.Mode(GridEditMode.Row);

              })
             .Columns(c =>
             {
                 c.Add()
                     .DataField("IsRefeed")
                     .Caption("Refeed")
                     .DataType(GridColumnDataType.Boolean)
                     .Width(70);
             })
            .Columns(c =>
            {
                c.Add()
                    .DataField("Date")
                    .DataType(GridColumnDataType.Date)
                    .AllowEditing(false)
                    .Width(80);
                c.Add()
                    .DataField("WeekDay")
                    .AllowEditing(false)
                    .Width(90);
                c.Add()
                    .Caption("Weight")
                    .Columns(a =>
                    {
                        a.Add()
                        .Caption("Planned")
                        .DataField("PlannedWeight")
                        .Format(f => f.Type(Format.FixedPoint).Precision(2))
                        .AllowEditing(false);
                        a.Add()
                        .Caption("Actual")
                        .DataField("ActualWeight")
                        .AllowEditing(false)
                        .Format(f => f.Type(Format.FixedPoint).Precision(2));
                        a.Add()
                        .Caption("Variance")
                        .AllowEditing(false)
                        .CalculateCellValue(@<text>
                                            function(data) {
                                            var variance = (data.ActualWeight - data.PlannedWeight)
                                            variance = variance.toFixed(2)
                                            @*return [data.ActualWeight - data.PlannedWeight]*@
                                            return variance
                            }
                        </text>);
                });
        c.Add()
        .Caption("Fat")
        .Columns(a =>
        {
        a.Add()
                .Caption("Planned")
                .DataField("PlannedFat");
        a.Add()
                .Caption("Actual")
                .DataField("ActualFat")
                .AllowEditing(false);
        a.Add()
                .Caption("Variance")
                .AllowEditing(false)
                .CalculateCellValue(@<text>
                    function(data) {
                    return [data.ActualFat - data.PlannedFat]
                    }
                </text>);
        });
                c.Add()
                .Caption("Protein")
                .Columns(a =>
                {
                    a.Add()
                            .Caption("Planned")
                            .DataField("PlannedProtein");
                    a.Add()
                            .Caption("Actual")
                            .DataField("ActualProtein")
                            .AllowEditing(false);
                    a.Add()
                            .Caption("Variance")
                            .AllowEditing(false)
                            .CalculateCellValue(@<text>
                                function(data) {
                                return [data.ActualProtein - data.PlannedProtein]
                                }
                            </text>);
                                });
                    c.Add()
                    .Caption("Carbohydrates")
                    .Columns(a =>
                    {
                        a.Add()
                            .Caption("Planned")
                            .DataField("PlannedCarbohydrates");
                        a.Add()
                            .Caption("Actual")
                            .AllowEditing(false)
                            .DataField("ActualCarbohydrates");
                        a.Add()
                            .Caption("Variance")
                            .AllowEditing(false)
                            .CalculateCellValue(@<text>
                                    function(data) {
                                        return [data.ActualCarbohydrates - data.PlannedCarbohydrates]
                                    }
                            </text>);
                    });

                })

    )
</div>

<script>
    function onDataGridInitialized(e) {
        dataGrid = e.component;
        window.console.log(dataGrid);
    }

    function onFocusedRowChanging(e) {
        var rowsCount = e.component.getVisibleRows().length,
            pageCount = e.component.pageCount(),
            pageIndex = e.component.pageIndex();

        if(e.event.key && e.prevRowIndex === e.newRowIndex) {
            if(e.newRowIndex === rowsCount - 1 && pageIndex < pageCount - 1) {
                e.component.pageIndex(pageIndex + 1).done(function() {
                    e.component.option("focusedRowIndex", 0);
                });
            } else if(e.newRowIndex === 0 && pageIndex > 0) {
                e.component.pageIndex(pageIndex - 1).done(function() {
                    e.component.option("focusedRowIndex", rowsCount - 1);
                });
            }
        }
    }

    function onRowUpdating(e) {
        for (var property in e.oldData) {
            if (!e.newData.hasOwnProperty(property)) {
                e.newData[property] = e.oldData[property];
            }
        }
    }

</script>