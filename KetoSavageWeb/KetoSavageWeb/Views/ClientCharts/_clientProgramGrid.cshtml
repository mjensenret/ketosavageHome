@model IEnumerable<KetoSavageWeb.ViewModels.UserProgramProgress>

<div id="devExtremeProgramGrid">
    @(Html.DevExtreme().DataGrid()
    .ID("gridClientProgram")
    .DataSource(Model)
    .RowAlternationEnabled(true)
    //.Paging(p => p.PageSize(10))
    .Scrolling( scrolling => scrolling.Mode(GridScrollingMode.Virtual))
    //.Pager(p => p
    //.AllowedPageSizes(new int[] { 10, 20, 30, 40 })
    //.ShowPageSizeSelector(true)
    //)
    .Columns(c =>
    {
        c.Add()
        .DataField("Date");
        c.Add()
    .Caption("Weight")
    .Columns(a =>
    {
        a.Add()
            .Caption("Planned")
            .DataField("PlannedWeight")
            .Format(f => f.Type(Format.FixedPoint).Precision(2));
        a.Add()
            .Caption("Actual")
            .DataField("ActualWeight")
            .Format(f => f.Type(Format.FixedPoint).Precision(2));
        a.Add()
            .Caption("Variance")
            .CalculateCellValue(@<text>
                function(data) {
                return [data.ActualWeight - data.PlannedWeight]
                }
            </text>);
    });
c.Add()
.Caption("Fat")
.Columns(a =>
{
a.Add()
        .Caption("Planned")
        .DataField("PlannedFat");
a.Add()
        .Caption("Actual")
        .DataField("ActualFat");
a.Add()
        .Caption("Variance")
        .CalculateCellValue(@<text>
            function(data) {
            return [data.ActualFat - data.PlannedFat]
            }
        </text>);
});
        c.Add()
        .Caption("Protein")
        .Columns(a =>
        {
            a.Add()
                    .Caption("Planned")
                    .DataField("PlannedProtein");
            a.Add()
                    .Caption("Actual")
                    .DataField("ActualProtein");
            a.Add()
                    .Caption("Variance")
                    .CalculateCellValue(@<text>
                        function(data) {
                        return [data.ActualProtein - data.PlannedProtein]
                        }
                    </text>);
                        });
            c.Add()
            .Caption("Carbohydrates")
            .Columns(a =>
            {
                a.Add()
                    .Caption("Planned")
                    .DataField("PlannedCarbohydrates");
                a.Add()
                    .Caption("Actual")
                    .DataField("ActualCarbohydrates");
                a.Add()
                    .Caption("Variance")
                    .CalculateCellValue(@<text>
                            function(data) {
                                return [data.ActualCarbohydrates - data.PlannedCarbohydrates]
                            }
                    </text>);
            });

        })

    )
</div>
