@model KetoSavageWeb.ViewModels.UserProgramViewModel
@{
    ViewBag.Title = "User Program Details";

}
<style>
    .buttons {
        padding: 10px;
        border: solid;
        border-width: thin;
        float: left;
        background-color: blue;
    }

    .pnlButtons {
        padding: 10px;
        border: solid;
        border-bottom-width: thick;
        background-color: aqua;
        /*float: left;*/
        display: inline-block;
    }
</style>
<script language="javascript">

    function LoadMyGrid() {

    }

    function OnStartEdit(s, e) {

    }

    function OnEndEdit(s, e) {

    }

    function OnValidateEdit(s, e) {

    }

    function AddNewRow() {

    }

    function OnSelectionChanged(s, e) {
    }

    function GotFocus(s, e) {
        //currentControl = s;
        //setTimeout(FocusControl, 100);
    }

    function FocusControl() {

        //currentControl.SelectAll();
    }

    function SubmitGrid() {
        if (UpdateMacroGrid.batchEditApi.ValidateRows()) {
            UpdateMacroGrid.UpdateEdit();
        }

    }

    function myFunction() {
        UpdateMacroGrid.batchEditApi.MoveFocusForward();
    }
</script>


<div id="controlPanel">
    @Html.DevExpress().Panel(settings =>
    {
        settings.Name = "pnlButtons";
        settings.ControlStyle.CssClass = "pnlButtons";
        settings.SetContent(() =>
        {
            ViewContext.Writer.Write("<div class=\"buttons\">");
            Html.DevExpress().Button(um =>
            {
                um.Name = "btnShowMacros";
                um.Text = "Update Macros";
                um.ClientSideEvents.Click = "function(s, e) { openWindow('Macros'); }";
            }).Render();
            ViewContext.Writer.Write("</div>");
            //ViewContext.Writer.Write("<div class=\"buttons\">");

            //Html.DevExpress().Button(t =>
            //{
            //    t.Name = "btnTest";
            //    t.Text = "Test Button";
            //}).Render();
            //ViewContext.Writer.Write("</div>");
        });
    }).GetHtml()
</div>
<div id="weightGraph">
    @Html.DevExpress().Panel(settings =>
    {
        settings.Name = "pnlWeightGraph";
        settings.SetContent(() =>
        {
            var userId = Session["UserId"];
            Html.RenderAction("ClientWeightGraph", "ClientCharts", new { userId = userId });
        });

    }).GetHtml()
</div>
<div id="gaugeContainer">
    @Html.DevExpress().Panel(settings =>
        {
            settings.Name = "pnlCharts";
            settings.SetContent(() =>
            {
                Html.RenderAction("ClientPerformanceGauge", "ClientCharts", new { userId = Session["UserId"] });
                Html.RenderAction("ClientPastWeekMacroChart", "ClientCharts", new { userId = Session["UserId"] });
                Html.RenderAction("ClientCurrentWeekMacroGauge", "ClientCharts", new { userId = Session["UserId"] });
            });
        }).GetHtml()
</div>
<div id="gridContainer">
    @Html.DevExpress().Panel(settings =>
    {
        settings.Name = "pnlGrids";
        settings.SetContent(() =>
        {
            Html.RenderAction("ClientProgramGrid", "ClientCharts", new { userId = Session["UserId"] });
        });
    }).GetHtml()
</div>


        @*@Html.DevExpress().DockPanel(settings =>
            {
                settings.Name = "pnlPastPerf";
                settings.PanelUID = "pnlPastPerformance";
                settings.HeaderText = "Past Performance";
                settings.VisibleIndex = 0;
                settings.Styles.Content.Paddings.Padding = 0;
                settings.ShowCloseButton = false;
                settings.ShowHeader = true;
                settings.AllowResize = true;
                settings.Width = 300;
                settings.OwnerZoneUID = "zone1";
                settings.Styles.Content.Border.BorderStyle = BorderStyle.Solid;
                settings.SetContent(() =>
                {
                    Html.RenderAction("pastPerformance");
                });
                //settings.PreRender = (sender, e) =>
                //{
                //    SetContentStyleOnPreRender((MVCxDockPanel)sender);
                //};
                //settings.ClientSideEvents.Init = "OnPanel1Init";
            }).GetHtml()
            @Html.DevExpress().DockPanel(settings =>
            {

                settings.Name = "pnlWeightGraph";
                settings.PanelUID = "pnlWeightGraph";
                settings.HeaderText = "Weight Graph";
                settings.ShowHeader = false;
                settings.ShowMaximizeButton = true;
                settings.OwnerZoneUID = "zone2";
                settings.SetContent(() =>
                {
                    var userId = Session["UserId"];
                    Html.RenderAction("ClientWeightGraph", "ClientCharts", new { userId = userId });

                });


            }).GetHtml()
            @Html.DevExpress().DockPanel(settings =>
                {
                    settings.Name = "pnlNewMacros";
                    settings.PanelUID = "pnlNewMacros";
                    settings.HeaderText = "Planned Macros";
                    settings.VisibleIndex = 0;
                    settings.Styles.Content.Paddings.Padding = 0;
                    settings.ShowCloseButton = false;
                    settings.ShowHeader = true;
                    settings.AllowResize = true;
                    //settings.Width = 300;
                    settings.OwnerZoneUID = "zone1";
                    settings.Styles.Content.Border.BorderStyle = BorderStyle.Solid;
                    settings.SetContent(() =>
                    {
                        Html.RenderAction("NewMacrosGridView");
                    });
                    //settings.PreRender = (sender, e) =>
                    //{
                    //    SetContentStyleOnPreRender((MVCxDockPanel)sender);
                    //};
                    //settings.ClientSideEvents.Init = "OnPanel1Init";
                }).GetHtml()



            @Html.DevExpress().PopupControl(settings =>
                {
                    settings.Name = "popupControl";
                    settings.Width = 400;
                    settings.AllowDragging = true;
                    settings.CloseAction = CloseAction.CloseButton;
                    settings.CloseOnEscape = true;
                    settings.PopupAnimationType = DevExpress.Web.AnimationType.Fade;
                    settings.ShowHeader = false;
                    settings.Modal = true;
                    settings.AutoUpdatePosition = true;
                    settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
                    settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
                    settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
                }).GetHtml()
            @Html.DevExpress().DockZone(
                        settings =>
                        {
                            settings.Name = "dockZone1";
                            settings.ZoneUID = "zone1";
                            settings.PanelSpacing = 3;
                            settings.Paddings.Padding = 3;
                            settings.Width = Unit.Percentage(75);
                            settings.ControlStyle.CssClass = "zone vertical first";
                            settings.Styles.DockingAllowedStyle.CssClass = "zone allowed";
                            settings.Styles.DockingForbiddenStyle.CssClass = "zone forbidden";
                        }
                    ).GetHtml()
            @Html.DevExpress().DockZone(
                    settings =>
                    {
                        settings.Name = "dockZone2";
                        settings.ZoneUID = "zone2";
                        settings.PanelSpacing = 3;
                        settings.Paddings.Padding = 3;
                        //settings.Height = 600;
                        settings.Width = Unit.Percentage(100);
                        settings.ControlStyle.CssClass = "zone vertical";
                        settings.Styles.DockingAllowedStyle.CssClass = "zone allowed";
                        settings.Styles.DockingForbiddenStyle.CssClass = "zone forbidden";
                    }
                    ).GetHtml()

            @Html.DevExpress().DockZone(
                    settings =>
                    {
                        settings.Name = "dockZone3";
                        settings.ZoneUID = "zone3";
                        settings.PanelSpacing = 11;
                        settings.Paddings.Padding = 3;
                        settings.Height = 200;
                        settings.Width = 583;
                        settings.ControlStyle.CssClass = "zone horizontal";
                        settings.Styles.DockingAllowedStyle.CssClass = "zone allowed";
                        settings.Styles.DockingForbiddenStyle.CssClass = "zone forbidden";
                    }
                    ).GetHtml()*@



    <script type="text/javascript">

        //debugger;
        function openWindow(action) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("EntryPopup", "UserPrograms")",
                data: { buttonName: action },
                traditional: true,
                success: function (response) {
                    popupControl.SetContentHtml(response);
                    MVCxClientUtils.FinalizeCallback();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert('oops, something bad happened');
                }
            });
            window['popupControl'].Show();
        }

    </script>
