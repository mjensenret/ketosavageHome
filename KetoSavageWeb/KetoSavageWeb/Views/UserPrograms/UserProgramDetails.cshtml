@model KetoSavageWeb.ViewModels.UserProgramViewModel
@{
    ViewBag.Title = "User Program Details";
    
}
<style>
    .zone {
        background-color: #FFFFFF;
        border-color: #4d4d4d;
        border-width: thick;
        border-style: solid;
        /*margin: 3px 3px 3px 3px;*/
    }

    .zone.vertical {
        float: left;
        padding: 3px;
    }

        .zone.vertical.first {
            float: left;
            margin: 0;
            padding: 3px;
            /*margin: 3px 3px 3px 3px;*/
        }

    .zone.horizontal {
        float: left;
        margin-top: 0px;
    }

    .zone.allowed {
        background-color: #D6F0CE;
        border-color: #AECDA7;
    }

    .zone.forbidden {
        background-color: #FADADA;
        border-color: #EDBFBF;
    }

    .zoneContainer {
        height: 800px;
        max-width: 1200px;
        min-width: 300px;
        width: 75%;
        align-content: center;
        align-self: center;
        background-color: #FF00FF;
        border-style: solid;
        border-width: 1px;
        padding: 3px;
        }
</style>
<script language="javascript">

    //var inEditMode = false;
    //var currentVisibleIndex = -1;
    //var currentFileNameValue;
    //var currentFileNameText;
    //var currentRowKey;
    //var currentNewRowIndex = 0;
    //var currentControl;




    function LoadMyGrid() {

    }



    function OnStartEdit(s,e)
    {

    }

    function OnEndEdit(s,e)
    {

    }

    function OnValidateEdit(s,e)
    {

    }

    function AddNewRow()
    {

    }

    function OnSelectionChanged(s,e)
    {
    }

    function GotFocus(s,e)
    {
        //currentControl = s;
        //setTimeout(FocusControl, 100);
    }

    function FocusControl()
    {

        //currentControl.SelectAll();
    }

    function SubmitGrid()
    {
        if (UpdateMacroGrid.batchEditApi.ValidateRows())
        {
            UpdateMacroGrid.UpdateEdit();
        }

    }

    function myFunction() {
        UpdateMacroGrid.batchEditApi.MoveFocusForward();
    }
</script>


@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "controlButtons";
    settings.PanelUID = "pnlControlButtons";
    settings.OwnerZoneUID = "zone1";
    settings.ShowCloseButton = false;
    settings.ShowHeader = false;
    settings.Styles.Content.Border.BorderStyle = BorderStyle.Inset;
    settings.SetContent(() =>
    {
        Html.DevExpress().FormLayout(form =>
        {
            form.Name = "frmUpdateControls";
            form.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
            form.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 500;
            form.NestedExtensionWidth = Unit.Percentage(100);
            //form.Styles.Style.CssClass = "loginForm";

            form.Items.AddGroupItem(i =>
            {
                i.ColCount = 2;
                i.ShowCaption = DefaultBoolean.False;
                i.GroupBoxDecoration = GroupBoxDecoration.None;
                i.Items.Add(b =>
                {
                    b.HorizontalAlign = FormLayoutHorizontalAlign.Center;
                    b.ShowCaption = DefaultBoolean.False;
                    //b.Width = Unit.Percentage(100);
                    b.SetNestedContent(() =>
                    {
                        Html.DevExpress().Button(
                            register =>
                            {
                                register.Name = "btnShowMacros";
                                register.Text = "Update Macros";
                                register.ClientSideEvents.Click = "function(s, e) { openWindow('Macros'); }";
                            }).Render();
                    });

                });

                //i.Items.Add(b =>
                //{
                //    b.HorizontalAlign = FormLayoutHorizontalAlign.Center;
                //    b.ShowCaption = DefaultBoolean.False;
                //    //b.Width = Unit.Percentage(100);
                //    b.SetNestedContent(() =>
                //    {
                //        Html.DevExpress().Button(
                //            btnMeasure =>
                //            {
                //                btnMeasure.Name = "btnShowMeasurements";
                //                btnMeasure.Text = "Enter Measurements";
                //                btnMeasure.ClientSideEvents.Click = "function(s, e) { openWindow('Measurements'); }";
                //            }
                //        ).Render();
                //    });
                //});
            });
        }).GetHtml();
    });
}).GetHtml()
@Html.DevExpress().DockPanel(settings =>
{
    settings.Name = "pnlPastPerf";
    settings.PanelUID = "pnlPastPerformance";
    settings.HeaderText = "Past Performance";
    settings.VisibleIndex = 0;
    settings.Styles.Content.Paddings.Padding = 0;
    settings.ShowCloseButton = false;
    settings.ShowHeader = true;
    settings.AllowResize = true;
    settings.Width = 300;
    settings.OwnerZoneUID = "zone1";
    settings.Styles.Content.Border.BorderStyle = BorderStyle.Solid;
    settings.SetContent(() =>
    {
        Html.RenderAction("pastPerformance");
    });
    //settings.PreRender = (sender, e) =>
    //{
    //    SetContentStyleOnPreRender((MVCxDockPanel)sender);
    //};
    //settings.ClientSideEvents.Init = "OnPanel1Init";
}).GetHtml()
@Html.DevExpress().DockPanel(settings =>
{

    settings.Name = "pnlWeightGraph";
    settings.PanelUID = "pnlWeightGraph";
    settings.HeaderText = "Weight Graph";
    settings.ShowHeader = false;
    settings.ShowMaximizeButton = true;
    settings.OwnerZoneUID = "zone2";
    settings.SetContent(() =>
    {
        var userId = Session["UserId"];
        Html.RenderAction("ClientWeightGraph", "ClientCharts", new { userId = userId });

    });


}).GetHtml()
@Html.DevExpress().DockPanel(settings =>
    {
        settings.Name = "pnlNewMacros";
        settings.PanelUID = "pnlNewMacros";
        settings.HeaderText = "Planned Macros";
        settings.VisibleIndex = 0;
        settings.Styles.Content.Paddings.Padding = 0;
        settings.ShowCloseButton = false;
        settings.ShowHeader = true;
        settings.AllowResize = true;
        //settings.Width = 300;
        settings.OwnerZoneUID = "zone1";
        settings.Styles.Content.Border.BorderStyle = BorderStyle.Solid;
        settings.SetContent(() =>
        {
            Html.RenderAction("NewMacrosGridView");
        });
        //settings.PreRender = (sender, e) =>
        //{
        //    SetContentStyleOnPreRender((MVCxDockPanel)sender);
        //};
        //settings.ClientSideEvents.Init = "OnPanel1Init";
    }).GetHtml()



@Html.DevExpress().PopupControl(settings =>
    {
        settings.Name = "popupControl";
        settings.Width = 400;
        settings.AllowDragging = true;
        settings.CloseAction = CloseAction.CloseButton;
        settings.CloseOnEscape = true;
        settings.PopupAnimationType = DevExpress.Web.AnimationType.Fade;
        settings.ShowHeader = false;
        settings.Modal = true;
        settings.AutoUpdatePosition = true;
        settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
        settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
    }).GetHtml()
@Html.DevExpress().DockZone(
            settings =>
            {
                settings.Name = "dockZone1";
                settings.ZoneUID = "zone1";
                settings.PanelSpacing = 3;
                settings.Paddings.Padding = 3;
                settings.Width = Unit.Percentage(75);
                settings.ControlStyle.CssClass = "zone vertical first";
                settings.Styles.DockingAllowedStyle.CssClass = "zone allowed";
                settings.Styles.DockingForbiddenStyle.CssClass = "zone forbidden";
            }
        ).GetHtml()
@Html.DevExpress().DockZone(
        settings =>
        {
            settings.Name = "dockZone2";
            settings.ZoneUID = "zone2";
            settings.PanelSpacing = 3;
            settings.Paddings.Padding = 3;
            //settings.Height = 600;
            settings.Width = Unit.Percentage(100);
            settings.ControlStyle.CssClass = "zone vertical";
            settings.Styles.DockingAllowedStyle.CssClass = "zone allowed";
            settings.Styles.DockingForbiddenStyle.CssClass = "zone forbidden";
        }
        ).GetHtml()

@Html.DevExpress().DockZone(
        settings =>
        {
            settings.Name = "dockZone3";
            settings.ZoneUID = "zone3";
            settings.PanelSpacing = 11;
            settings.Paddings.Padding = 3;
            settings.Height = 200;
            settings.Width = 583;
            settings.ControlStyle.CssClass = "zone horizontal";
            settings.Styles.DockingAllowedStyle.CssClass = "zone allowed";
            settings.Styles.DockingForbiddenStyle.CssClass = "zone forbidden";
        }
        ).GetHtml()
<script type="text/javascript">

    //debugger;
    function openWindow(action) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("EntryPopup", "UserPrograms")",
            data: { buttonName: action },
            traditional: true,
            success: function (response) {
                popupControl.SetContentHtml(response);
                MVCxClientUtils.FinalizeCallback();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert('oops, something bad happened');
            }
        });
        window['popupControl'].Show();
    }

</script>

