@using KetoSavageWeb.ViewModels

@(Html.DevExtreme().DataGrid()
            .ID("dxClientList")
            .DataSource(d => d.WebApi()
                .Controller("ManageClientProgramsAPI")
                .LoadAction("GetClientPrograms")
                .UpdateAction("updateProgram")
                .InsertAction("updateProgram")
                .Key("Id"))
            .ShowBorders(true)
            .RowAlternationEnabled(true)
            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
            .FilterRow(fr => fr
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
            )
            .HeaderFilter(hf => hf.Visible(true))
            .SearchPanel(searchPanel => searchPanel
                .Visible(true)
                .Width(240)
                .Placeholder("Search...")
            )
            .OnRowUpdating("onRowUpdating")
            .Editing(e =>
            {
                e.Mode(GridEditMode.Popup);
                e.AllowUpdating(true);
                e.UseIcons(true);
                e.Popup(p => p
                    .Title("Edit Client Program")
                    .ShowTitle(true)
                    );
            })
            .Columns(c =>
            {
                c.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Buttons(b =>
                    {
                        b.Add()
                            .Name(GridColumnButtonName.Edit);
                    });
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("FullName")
                    .Caption("Name")
                    .AllowEditing(false);
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("UserName")
                    .Visible(false)
                    .AllowEditing(false)
                    .ShowEditorAlways(false);
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("CoachId")
                    .Caption("Coach")
                    .Lookup(l => l
                        .DataSource(d => d.WebApi().Controller("ManageClientProgramsAPI").Key("Id")
                            .LoadAction("getCoachList"))
                        .DisplayExpr("FirstName")
                        .ValueExpr("Id")
                    );
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("ProgramName")
                    .Caption("Program")
                    .Lookup(l => l
                        .DataSource(d => d.WebApi().Controller("ManageClientProgramsAPI")
                            .LoadAction("getProgramList"))
                        .DisplayExpr("Description")
                        .ValueExpr("Description")
                    );
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("currentProgramStartDate")
                    .DataType(GridColumnDataType.Date)
                    .SetCellValue("setStartDate")
                    .Caption("Start Date");
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("currentProgramRenewalDate")
                    .DataType(GridColumnDataType.Date)
                    .Caption("Renewal Date");
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("currentProgramEndDate")
                    .DataType(GridColumnDataType.Date)
                    .Caption("End Date");
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("StartWeight")
                    .Caption("Start Weight");
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("GoalWeight")
                    .Caption("Goal Weight");
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("CurrentWeight")
                    .Caption("Current Weight");
            })
            .Columns(c =>
            {
                c.Add()
                    .DataField("IsActive")
                    .Caption("Active")
                    .DataType(GridColumnDataType.Boolean);
            })
)

@using (Html.DevExtreme().NamedTemplate("dxUserProgramPopup"))
{
    @*@(Html.Action("UpdateUserProgram", "UserPrograms", new {userId = <% ))*@
}

<script type="text/javascript">

    function enterUserProgramPopup(data) {
        var url = '@Url.Action("UpdateUserProgram", "UserPrograms", new { userId = "placeholder" })';
        url = url.replace('placeholder', data.row.data.Id);
        document.getElementById("userProgram").innerHTML = url;

        var mainPopup = $("#mainDxPopup").dxPopup("instance");
            //mainPopup.option("contentTemplate", $("#dxUserProgramPopup"));
            mainPopup.option("contentTemplate", url);
            mainPopup.option("title", "Modify Program");
            mainPopup.show();
    }
    function onRowUpdating(e) {

        e.newData["UserName"] = e.oldData["UserName"];
        console.log("New Active: " + e.newData["IsActive"]);
        console.log("Old Active: " + e.oldData["IsActive"]);
        if (e.newData["IsActive"] == undefined) {
            e.newData["IsActive"] = e.oldData["IsActive"];
        }
        else {
            console.log("Checkbox was changed");
        }
        //e.newData["IsActive"] = e.newData["IsActive";
        
    }

    function setStartDate(rowData, value) {
        rowData.currentProgramStartDate = value;
        var startDate = new Date(value);
        var renewal = new Date(startDate);
        renewal.setDate(renewal.getDate() + 30);
        rowData.currentProgramRenewalDate = renewal;
        var endDate = new Date(startDate);
        endDate.setDate(endDate.getDate() + 90);
        rowData.currentProgramEndDate = endDate;
    }
</script>