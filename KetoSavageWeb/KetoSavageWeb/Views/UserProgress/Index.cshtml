@{
    ViewBag.Title = "User Progress";
}

<div id="newsfeed">
    @Html.DevExpress().Panel(p =>
    {
        p.Name = "pnlNewsCarousel";
        p.SetContent(() =>
        {
            Html.RenderAction("newsCarousel", "ManageNews");
        });
    }).GetHtml()
</div>
@*<div>
    @Html.DevExpress().Panel(p =>
    {
        p.Name = "pnlTest";
        p.Width = 800;
        p.SetContent(() =>
        {
            Html.RenderAction("DxMeasurementForm", "UserProgress");
        });
    }).GetHtml()
</div>*@
<div id="weightGraph">
    @Html.DevExpress().Panel(p =>
    {
    p.Name = "pnlWeightGraph";
    //p.ControlStyle.BackColor = System.Drawing.Color.Red;
    p.SetContent(() =>
    {
    var userId = Session["UserId"];
    Html.RenderAction("ClientWeightGraph", "ClientCharts", new { userId = userId });
    });
    }).GetHtml()
</div>
<div id="gaugeContainer">
    @Html.DevExpress().Panel(p =>
    {
    p.Name = "pnlCharts";
    p.SetContent(() =>
    {
    Html.RenderAction("ClientPerformanceGauge", "ClientCharts", new { userId = Session["UserId"] });
    Html.RenderAction("ClientPastWeekMacroChart", "ClientCharts", new { userId = Session["UserId"] });
    Html.RenderAction("ClientCurrentWeekMacroGauge", "ClientCharts", new { userId = Session["UserId"] });
    });
    }).GetHtml()
</div>

<div id="gridContainer">
    @Html.DevExpress().Panel(p =>
    {
        p.Name = "pnlPastProgress";
        p.SetContent(() =>
        {
            Html.RenderAction("PastPerformanceGrid");
        });
    }).GetHtml()
</div>

@(Html.DevExtreme().Popup()
          .ID("measureFormPopup")
          .Visible(false)
          .DragEnabled(true)
          .CloseOnOutsideClick(true)
          .ContentTemplate(@<text>
            @(Html.Action("DxMeasurementForm"))
        </text>)
)
<script type="text/javascript">

    function CreateInputElement(itemName, itemValue, itemIndex, container) {
        var $input = $("<input/>");

        $input.appendTo(container).attr({ type: "hidden", name: "MeasurementDetails[" + itemIndex + "]." + itemName }).val(itemValue);
    }

    function clickHandler(e) {

        if (e.validationGroup.validate().isValid) {

            $("#measurementGrid").dxDataGrid("instance").getDataSource().load().done(function (items) {

                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    for (var property in item) {
                        if (item.hasOwnProperty(property)) {
                            CreateInputElement(property, item[property], i, $("#editMeasurements")[0]);
                        }
                    }
                }
                $("#editMeasurements").submit();

            });
        }
    }

    function getDateValue() {
        var date = $("#measurementDate").dxDateBox("option", "text");
        window.console.log(date);
        return date;
    }

    function refreshForm() {

        var date = getDateValue();
        changeMeasurementDate(date);
        //$("#measurementGrid").dxDataGrid("refresh");

    }

    function changeMeasurementDate(date) {
        var dd = date;
        window.console.log("dd: " +dd);
        $.ajax({
            type: "POST",
            url: '@Url.Action("DxUpdateMeasurementDateChange", "UserProgress")',
            data: { date: date },
            success: function(response) {
                $("#form-container").html(response);
            }
        });

    }

    function OnDateChanged() {
        var dd = ASPxClientControl.GetControlCollection().GetByName("macroDate").GetValue().toDateString("MM/dd/yyyy");
        window.console.log("Value of dd" + dd);
        var fatField = ASPxClientControl.GetControlCollection().GetByName("actualFat");
        var proteinField = ASPxClientControl.GetControlCollection().GetByName("actualProtein");
        var carbField = ASPxClientControl.GetControlCollection().GetByName("actualCarb");
        var noteField = ASPxClientControl.GetControlCollection().GetByName("Notes");
        var hungerField = ASPxClientControl.GetControlCollection().GetByName("hungerLevel");

        $.ajax({
            type: "POST",
            url: '@Url.Action("onMacroDateChange", "UserProgress")',
            data: { date: dd},
            //beforeSend: function() {
            //    loadingPanel.Show();
            //},
            success: function(response) {
                if (response.IsSuccess) {
                    window.console.log(response.fat);
                    window.console.log(response.protein);
                    window.console.log(response.carbs);
                    window.console.log(response.notes);
                    window.console.log(response.hungerLevel);
                    fatField.SetText(response.fat);
                    proteinField.SetText(response.protein);
                    carbField.SetText(response.carbs);
                    if (response.notes == null) {
                        noteField.SetText("");
                    }
                    else {
                        noteField.SetText(response.notes);
                    }
                    if (response.hungerLevel == null) {
                        hungerField.SetValue("");
                    }
                    else {
                        hungerField.SetValue(response.hungerLevel);
                    }
                }
                else {
                    window.console.log("no success");
                }

            },
            error: function (jqXHR, textStatus, errorThrown) {
                window.console.log(errorThrown);
                alert("For some reason, this did not work");
            }
        });
    }
</script>



