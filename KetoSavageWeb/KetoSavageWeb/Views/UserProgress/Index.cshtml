@using DevExpress.Web.ASPxTreeList
@{
    ViewBag.Title = "Client Dashboard";
}
@if(Request.Browser.IsMobileDevice)
{
<div class="row">
    <div class="col-sm-12 col-md-3">
        @(Html.DevExtreme().Button()
            .ID("btnEnterMacros")
            .Text("Enter Macros")
            .OnClick("enterMacroPopup")

        )
    </div>
    <div class="col-sm-12 col-md-3">
        @(Html.DevExtreme().Button()
            .ID("btnEnterMeasurements")
            .Text("Enter Measurements")
            .OnClick("enterMeasurementPopup")

        )
    </div>
</div>
}

<div class="row">
    <div class="col-sm-12">
        @Html.Action("newsCarousel", "ManageNews")
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        @Html.Action("ClientWeightGraph", "ClientCharts", new { userId = Session["UserId"] })
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        @Html.Action("ClientMacroScoreChart", "ClientCharts", new { userId = Session["UserId"] })
    </div>
    <div class="col-sm-12">
        @Html.Action("ClientLifetimeMacroScoreChart", "ClientCharts", new { userId = Session["UserId"] })
    </div>
</div>
<div class="row">
    <div class="col-sm-12 col-md-3">
        @Html.Action("ClientPerformanceGauge", "ClientCharts", new { userId = Session["UserId"] })
    </div>
    <div class="col-sm-12 col-md-3">
        @Html.Action("ClientPastWeekMacroChart", "ClientCharts", new { userId = Session["UserId"] })
    </div>
    <div class="col-sm-12 col-md-3">
        @Html.Action("PvAMacroPieChart", "ClientCharts")
    </div>
    <div class="col-sm-12 col-md-3">
        @Html.Action("PvACurrentMacroPieChart", "ClientCharts")
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        @Html.Action("ClientCurrentWeekMacroGauge", "ClientCharts", new { userId = Session["UserId"] })
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        @if (Request.Browser.IsMobileDevice)
        {
            if (Request.Browser.ScreenPixelsWidth > 780)
            {
                @Html.Action("ClientProgramGrid", "ClientCharts", new { userId = Session["UserId"] })
            }
            else
            {
                @Html.Action("ClientProgramGridMobile", "ClientCharts", new { userId = Session["UserId"] })
            }

        }
        else
        {
            @Html.Action("ClientProgramGrid", "ClientCharts", new { userId = Session["UserId"] })
        }
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("measurementPopup"))
{
    @(Html.Action("DxMeasurementForm"))
}

@using (Html.DevExtreme().NamedTemplate("dxMacroPopup"))
{
    @(Html.Action("DxMacroPopup"))
}

<script type="text/javascript">

    $("#enterMacros").click(function () {
        var mainPopup = $("#mainDxPopup").dxPopup("instance");
        mainPopup.option("contentTemplate", $("#dxMacroPopup"));
        mainPopup.option("title", "Enter Macros");
        mainPopup.show();
    });

    $("#enterMeasurements").click(function () {
        var mainPopup = $("#mainDxPopup").dxPopup("instance");
        mainPopup.option("contentTemplate", $("#measurementPopup"));
        mainPopup.option("title", "Enter Measurements");
        mainPopup.show();
    });

    function enterMacroPopup() {
        var mainPopup = $("#mainDxPopup").dxPopup("instance");
        mainPopup.option("contentTemplate", $("#dxMacroPopup"));
        mainPopup.option("title", "Enter Macros");
        mainPopup.show();
    }

    function enterMeasurementPopup() {
        var mainPopup = $("#mainDxPopup").dxPopup("instance");
        mainPopup.option("contentTemplate", $("#measurementPopup"));
        mainPopup.option("title", "Enter Measurements");
        mainPopup.show();
    }


    function CreateInputElement(itemName, itemValue, itemIndex, container) {
        var $input = $("<input/>");

        $input.appendTo(container).attr({ type: "hidden", name: "MeasurementDetails[" + itemIndex + "]." + itemName }).val(itemValue);
    }

    function clickHandler(e) {
        window.console.log(e);
        if (e.validationGroup.validate().isValid) {

            $("#measurementGrid").dxDataGrid("instance").getDataSource().load().done(function (items) {

                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    for (var property in item) {
                        if (item.hasOwnProperty(property)) {
                            CreateInputElement(property, item[property], i, $("#editMeasurements")[0]);
                        }
                    }
                }
                $("#editMeasurements").submit();

            });
        }
    }

    function getDateValue() {
        var date = $("#measurementDate").dxDateBox("option", "text");
        return date;
    }

    function refreshForm() {

        var date = getDateValue();
        changeMeasurementDate(date);
    }

    function changeMeasurementDate(newDate) {
        var dd = newDate;
        var form = $("#measurementForm").dxForm("instance");
        var grid = $("#measurementGrid").dxDataGrid("instance");
        $.ajax({
            type: "POST",
            url: '@Url.Action("DxUpdateMeasurementDateChange", "UserProgress")',
            data: { newDate: dd },
            success: function (response) {
                form.option("formData", response);
                grid.option("dataSource", response.MeasurementDetails);
            }
        });

    }

    function refreshMacroForm() {
        var date = $("#macroDate").dxDateBox("option", "text");
        changeMacroDate(date);
    }

    function changeMacroDate(date) {
        var dd = date;
        window.console.log("Value of date " + dd);

        var form = $("#macroForm").dxForm("instance");

        $.ajax({
            type: "POST",
            url: '@Url.Action("EnterMacroForm", "UserProgress")',
            data: { date: date},
            //beforeSend: function() {
            //    loadingPanel.Show();
            //},
            success: function(response) {
                //$("#form-container").html(response);
                window.console.log("made it inside macroDate");
                form.option("formData", response);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                window.console.log(errorThrown);
                alert("For some reason, this did not work");
            }
        });
    }

    //function macroDateChanged() {
    //    window.console.log("macro date field updated");
    //    var form
    //}

</script>



